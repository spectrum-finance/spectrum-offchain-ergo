use ergo_lib::ergotree_ir::ergo_tree::ErgoTree;
use ergo_lib::ergotree_ir::serialization::SigmaSerializable;

pub fn pool_validator() -> ErgoTree {
    let raw = "19e9041f04000402040204040404040604060408040804040402040004000402040204000400040a0500\
    040204020500050004020402040605000500040205000500d81bd601b2a5730000d602db63087201d603db6308a7d60\
    4e4c6a70410d605e4c6a70505d606e4c6a70605d607b27202730100d608b27203730200d609b27202730300d60ab272\
    03730400d60bb27202730500d60cb27203730600d60db27202730700d60eb27203730800d60f8c720a02d610998c720\
    902720fd6118c720802d612b27204730900d6139a99a37212730ad614b27204730b00d6159d72137214d61695919e72\
    137214730c9a7215730d7215d617b27204730e00d6187e721705d6199d72057218d61a998c720b028c720c02d61b998\
    c720d028c720e02d1ededededed93b27202730f00b27203731000ededed93e4c672010410720493e4c6720105057205\
    93e4c6720106057206928cc77201018cc7a70193c27201c2a7ededed938c7207018c720801938c7209018c720a01938\
    c720b018c720c01938c720d018c720e0193b172027311959172107312eded929a997205721172069c7e999590721672\
    1772169a721773137314057219937210f0721a939c7210997218a273157e721605f0721b958f72107316ededec929a9\
    97205721172069c7e9995907216721772169a72177317731805721992a39a9a72129c72177214b2720473190093721a\
    f0721092721b959172167217731a9c721a997218a2731b7e721605d801d61ce4c672010704edededed90721c9972167\
    31c909972119c7e997217721c0572199a7219720693f0998c72070272117d9d9c7e7219067e721b067e720f06059372\
    10731d93721a731e";
    let bf = base16::decode(raw.as_bytes()).unwrap();
    ErgoTree::sigma_parse_bytes(&*bf).unwrap()
}

pub fn deposit_validator_temp() -> Vec<u8> {
    // Todo: sync with latest contract value
    // Current value taken from: https://github.com/spectrum-finance/ergo-dex/blob/e8f0d40ff5e84300300b261e560d68e3bf6c53e3/contracts/lqmining/simple/Deposit.sc#L19
    let raw = "d808d601b2a4730000d602db63087201d6037301d604b2a5730200d6057303d606c57201d607b2a57304\
    00d6088cb2db6308a773050002eb027306d1eded938cb27202730700017203ed93c27204720593860272067308b2db6\
    3087204730900edededed93e4c67207040e720593e4c67207050e72039386028cb27202730a00017208b2db63087207\
    730b009386028cb27202730c00019c7208730db2db63087207730e009386027206730fb2db63087207731000";
    base16::decode(raw.as_bytes()).unwrap()
}

pub fn redeem_validator_temp() -> Vec<u8> {
    let raw = "d801d601b2a5730000eb027301d1ed93c27201730293860273037304b2db63087201730500";
    base16::decode(raw.as_bytes()).unwrap()
}

pub fn bundle_validator() -> ErgoTree {
    let raw = "19b203150400040004040404040404020400040005000402040204000502040404000402050004040400\
    05fcffffffffffffffff010100d80ed601b2a5730000d602db63087201d603e4c6a7050ed604b2a4730100d605db630\
    87204d6068cb2720573020002d607998cb27202730300027206d608e4c6a7040ed609db6308a7d60a8cb27209730400\
    01d60bb27209730500d60cb27209730600d60d8c720c02d60e8c720b02d1ed938cb2720273070001720395937207730\
    8d808d60fb2a5e4e3000400d610b2a5e4e3010400d611db63087210d612b27211730900d613b2e4c672040410730a00\
    d614c672010804d6157e99721395e67214e47214e4c67201070405d616b2db6308720f730b00eded93c2720f7208ede\
    dedededed93e4c67210040e720893e4c67210050e720393c27210c2a7938602720a730cb27211730d00938c7212018c\
    720b019399720e8c72120299720e9c7215720d93b27211730e00720ced938c7216018cb27205730f0001927e8c72160\
    2069d9c9c7e9de4c6720405057e721305067e720d067e999d720e720d7215067e720606958f7207731093b2db6308b2\
    a47311007312008602720a73137314";
    let bf = base16::decode(raw.as_bytes()).unwrap();
    ErgoTree::sigma_parse_bytes(&bf).unwrap()
}
